plugins {
    id 'idea'
    id 'maven-publish'
    id 'java-library'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'net.neoforged.moddev' version '2.0.107'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

group = group_id
version = mod_version

def env = System.getenv()
if (env.RELEASE) {
    version = mod_version
} else if (env.GITHUB_RUN_NUMBER) {
    version = "$mod_version+${env.GITHUB_RUN_NUMBER}-gha"
} else {
    version = "$mod_version+local"
}

neoForge {
    version = project.neo_version

    parchment {
        minecraftVersion = project.minecraft_version
        mappingsVersion = project.parchment_version
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.WARN
            gameDirectory = project.file('run')
        }
        client {
            client()
        }
        server {
            server()
        }
        data {
            clientData()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

def generateModMetadata = tasks.register('generateModMetadata', ProcessResources) {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from 'src/main/templates'
    into 'build/generated/sources/modMetadata'
}
sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
